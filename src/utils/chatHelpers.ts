import { ChatMessage, OnlineUser } from "@/types/chat";

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const avatarPool = [
  "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1524250502761-1ac6f2e30d43?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150&h=150&fit=crop&crop=face",
  "https://images.unsplash.com/photo-1507591064344-4c6ce005b128?w=150&h=150&fit=crop&crop=face",
];

const russianNames = [
  "–ê–ª–µ–∫—Å–µ–π",
  "–ú–∞—Ä–∏—è",
  "–î–º–∏—Ç—Ä–∏–π",
  "–ê–Ω–Ω–∞",
  "–ú–∏—Ö–∞–∏–ª",
  "–ï–ª–µ–Ω–∞",
  "–°–µ—Ä–≥–µ–π",
  "–û–ª—å–≥–∞",
  "–ê–Ω–¥—Ä–µ–π",
  "–¢–∞—Ç—å—è–Ω–∞",
  "–í–ª–∞–¥–∏–º–∏—Ä",
  "–ù–∞—Ç–∞–ª—å—è",
  "–ú–∞–∫—Å–∏–º",
  "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
  "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
  "–Æ–ª–∏—è",
  "–ê–Ω—Ç–æ–Ω",
  "–°–≤–µ—Ç–ª–∞–Ω–∞",
  "–ù–∏–∫–æ–ª–∞–π",
  "–ò—Ä–∏–Ω–∞",
  "–î–µ–Ω–∏—Å",
  "–ì–∞–ª–∏–Ω–∞",
  "–†–æ–º–∞–Ω",
  "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
];

export const getRandomAvatar = (): string => {
  return avatarPool[Math.floor(Math.random() * avatarPool.length)];
};

export const getRandomName = (): string => {
  return russianNames[Math.floor(Math.random() * russianNames.length)];
};

export const createMessage = (
  userName: string,
  userAvatar: string,
  message: string,
  type: "text" | "image" | "video" | "voice" = "text",
  replyTo?: { id: string; userName: string; message: string },
  mediaUrl?: string,
  voiceDuration?: number,
): ChatMessage => {
  return {
    id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    userName,
    message,
    timestamp: new Date(),
    avatar: userAvatar || getRandomAvatar(),
    type,
    mediaUrl,
    voiceDuration,
    replyTo,
    reactions: {},
  };
};

export const createUser = (name: string, avatar?: string): OnlineUser => {
  return {
    id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    name,
    avatar: avatar || getRandomAvatar(),
    joinedAt: new Date(),
    lastActivity: new Date(),
  };
};

export const getDemoMessages = (): ChatMessage[] => {
  const demoUsers = [
    { name: "–ê–ª–µ–∫—Å–µ–π", avatar: getRandomAvatar() },
    { name: "–ú–∞—Ä–∏—è", avatar: getRandomAvatar() },
    { name: "–î–º–∏—Ç—Ä–∏–π", avatar: getRandomAvatar() },
  ];

  return [
    createMessage(
      demoUsers[0].name,
      demoUsers[0].avatar,
      "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
    ),
    createMessage(
      demoUsers[1].name,
      demoUsers[1].avatar,
      "–û—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å –∫–∞–∫?",
    ),
    createMessage(
      demoUsers[2].name,
      demoUsers[2].avatar,
      "–í—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!",
    ),
  ];
};

export const getWelcomeMessages = (): ChatMessage[] => {
  const welcomeMessages = [
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! üëã",
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä",
  ];

  return welcomeMessages.map((msg, index) =>
    createMessage(
      "–°–∏—Å—Ç–µ–º–∞",
      "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=150&h=150&fit=crop&crop=face",
      msg,
    ),
  );
};

export const saveToLocalStorage = <T>(key: string, data: T): void => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", error);
  }
};

export const loadFromLocalStorage = <T>(key: string): T | null => {
  try {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:", error);
    return null;
  }
};
