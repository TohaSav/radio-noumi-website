import { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Icon from "@/components/ui/icon";
import ChatMessage from "@/components/chat/ChatMessage";
import EmojiPicker from "@/components/chat/EmojiPicker";

interface Message {
  id: string;
  text: string;
  author: string;
  timestamp: Date;
  type: 'text' | 'image';
  imageUrl?: string;
  isOwnMessage?: boolean;
}

const Chat = () => {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –†–∞–¥–∏–æ Noumi! üéµ',
      author: '–°–∏—Å—Ç–µ–º–∞',
      timestamp: new Date(),
      type: 'text'
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [userName] = useState(`–°–ª—É—à–∞—Ç–µ–ª—å${Math.floor(Math.random() * 1000)}`);
  const [onlineCount, setOnlineCount] = useState(3150084);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∏–¥
  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + "M";
    } else if (num >= 1000) {
      return (num / 1000).toFixed(0) + "K";
    }
    return num.toString();
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ä–∞–¥–∏–æ)
  useEffect(() => {
    const updateOnlineCount = () => {
      setOnlineCount((current) => {
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ¬±0.5-2% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const changePercent = Math.random() * 0.035 - 0.0175;
        const change = Math.floor(current * changePercent);
        let newValue = current + change;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        newValue = Math.max(3150084, Math.min(96350521, newValue));
        
        return newValue;
      });
    };

    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    const initialTimeout = setTimeout(updateOnlineCount, 30000);

    // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3-7 –º–∏–Ω—É—Ç
    const interval = setInterval(
      updateOnlineCount,
      Math.random() * 240000 + 180000,
    );

    return () => {
      clearTimeout(initialTimeout);
      clearInterval(interval);
    };
  }, []);

  // –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    const userNames = [
      '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π–§–∞–Ω', '–ê–Ω–Ω–∞_2024', '–î–º–∏—Ç—Ä–∏–π_–ú–æ—Å–∫–≤–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞–ö', '–ê–ª–µ–∫—Å–µ–π99',
      'MusicLover', '–ï–ª–µ–Ω–∞_–°–ü–±', '–ú–∏—Ö–∞–∏–ª_–†–∞–¥–∏–æ', '–ù–∞—Ç–∞—à–∞_–ú–∏–Ω—Å–∫', '–í–ª–∞–¥–∏–º–∏—Ä_–ï–∫–±',
      '–û–ª—å–≥–∞_Music', '–°–µ—Ä–≥–µ–π_–ö–∞–∑–∞–Ω—å', '–ú–∞—Ä–∏—è_–ö–∏–µ–≤', '–ê–Ω–¥—Ä–µ–π–ú', '–Æ–ª–∏—è_–°–∞–º–∞—Ä–∞',
      '–ù–∏–∫–æ–ª–∞–π–ë', '–ö—Ä–∏—Å—Ç–∏–Ω–∞_–ù–ù', '–ú–∞–∫—Å–∏–º_–û–º—Å–∫', '–ò—Ä–∏–Ω–∞_–£—Ñ–∞', '–†–æ–º–∞–Ω_–¢—É–ª–∞'
    ];

    const messageTemplates = [
      '–≠—Ç–∞ –ø–µ—Å–Ω—è –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üî•',
      '–û–±–æ–∂–∞—é —ç—Ç–æ —Ä–∞–¥–∏–æ ‚ù§Ô∏è',
      '–û—Ç–ª–∏—á–Ω–∞—è –º—É–∑—ã–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã üëç',
      '–ö—Ç–æ –∑–Ω–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞?',
      '–£–∂–µ —á–∞—Å —Å–ª—É—à–∞—é, –Ω–µ –º–æ–≥—É –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è!',
      '–°—É–ø–µ—Ä –ø–æ–¥–±–æ—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è!',
      '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –≤ —á–∞—Ç–µ! üëã',
      '–≠—Ç–∞ –º–µ–ª–æ–¥–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –¥–µ—Ç—Å—Ç–≤–æ...',
      '–†–∞–¥–∏–æ Noumi - –ª—É—á—à–µ–µ! üéµ',
      '–ö—Ç–æ –µ—â–µ –∏–∑ –ú–æ—Å–∫–≤—ã —Å–ª—É—à–∞–µ—Ç?',
      '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–æ–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!',
      '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–±–µ–∂–∫–∏ üèÉ‚Äç‚ôÇÔ∏è',
      '–≠—Ç—É –ø–µ—Å–Ω—é –∏—Å–∫–∞–ª —É–∂–µ –º–µ—Å—è—Ü!',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä',
      '–°–ª—É—à–∞—é –Ω–∞ —Ä–∞–±–æ—Ç–µ, –∫–æ–ª–ª–µ–≥–∏ –∑–∞–≤–∏–¥—É—é—Ç üòÑ',
      '–ú–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–ª–∞—Å—Å–∏–∫–∏?',
      '–≠—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–π –ª—é–±–∏–º—ã–π!',
      '–†–∞–¥–∏–æ –∏–≥—Ä–∞–µ—Ç —É–∂–µ 3 —á–∞—Å–∞ –ø–æ–¥—Ä—è–¥ üéß',
      '–û—Ç–ª–∏—á–Ω—ã–π –∑–≤—É–∫, –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–ø–µ—Ä!',
      '–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è',
      '–≠—Ç–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è - —à–µ–¥–µ–≤—Ä!',
      '–°–ª—É—à–∞—é –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏, –ø—Ä–∏–≤–µ—Ç! üá©üá™',
      '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è... –ø–æ–º–Ω—é —ç—Ç—É –ø–µ—Å–Ω—é',
      '–í–∫–ª—é—á–∏–ª –Ω–∞ –≤—Å—é –∫–≤–∞—Ä—Ç–∏—Ä—É üîä',
      '–ñ–µ–Ω–∞ —Ç–æ–∂–µ –ø–æ–¥—Å–µ–ª–∞ –Ω–∞ —ç—Ç–æ —Ä–∞–¥–∏–æ üë´',
      '–õ—É—á—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!',
      '–≠–º–æ—Ü–∏–∏ –∑–∞—à–∫–∞–ª–∏–≤–∞—é—Ç –æ—Ç —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞! üé∂',
      '–ö—Ç–æ-–Ω–∏–±—É–¥—å –∑–Ω–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?',
      '–£–∂–µ –¥–æ–±–∞–≤–∏–ª –≤ –ø–ª–µ–π–ª–∏—Å—Ç Spotify',
      '–î–µ—Ç–∏ —Ç–∞–Ω—Ü—É—é—Ç –ø–æ–¥ —ç—Ç—É –º—É–∑—ã–∫—É üíÉ',
      '–†–∞–¥–∏–æ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –≥—Ä—É—Å—Ç–∏',
      '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é —Ç–∞–∫—É—é –º—É–∑—ã–∫—É',
      '–ò–≥—Ä–∞–µ—Ç –≤ –º–∞—à–∏–Ω–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º! üöó',
      '–°–æ—Å–µ–¥–∏ —Å—Ç—É—á–∞—Ç –≤ —Å—Ç–µ–Ω—É üòÖ',
      '–ö–æ–Ω—Ü–µ—Ä—Ç —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –±—ã–ª –±—ã –∫—Ä—É—Ç!',
      '–í—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª —É—Å–ª—ã—à–∞—Ç—å —ç—Ç–æ –≤ —ç—Ñ–∏—Ä–µ',
      '–†–∞–¥–∏–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –∫–ª–∞—Å—Å!',
      '–°–ª—É—à–∞—é –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö –Ω–∞ —Ä–∞–±–æ—Ç–µ',
      '–≠—Ç–∞ –ø–µ—Å–Ω—è - –º–æ–π –±—É–¥–∏–ª—å–Ω–∏–∫ üîî',
      '–í–∫–ª—é—á–∏–ª –ø–∞–ø–µ, –µ–º—É —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
      '–ú—É–∑—ã–∫–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π! ü§ù',
      '–¢–∞–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞ –Ω–µ –æ–∂–∏–¥–∞–ª',
      '–ú–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?',
      '–ó–∞–ø–∏—Å—ã–≤–∞—é —ç—Ñ–∏—Ä –Ω–∞ –¥–∏—Å–∫ üíø',
      '–°–ª—É—á–∞–π–Ω–æ –Ω–∞—à–µ–ª —Ä–∞–¥–∏–æ, –Ω–µ –∂–∞–ª–µ—é!',
      '–£–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≤—Å–µ–º –¥—Ä—É–∑—å—è–º',
      '–°–ª—É—à–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00',
      '–≠—Ç–æ—Ç DJ –∑–Ω–∞–µ—Ç —Ç–æ–ª–∫ –≤ –º—É–∑—ã–∫–µ!',
      '–•–æ—á—É —Ç–∞–∫—É—é –∂–µ –ø–æ–¥–±–æ—Ä–∫—É –¥–æ–º–∞',
      '–ú—É–∑—ã–∫–∞ –¥–ª—è –¥—É—à–∏, —Å–ø–∞—Å–∏–±–æ! üíù'
    ];

    const reactions = [
      'üòç', 'üî•', 'üíØ', 'üëè', 'üéµ', '‚ù§Ô∏è', 'üé∂', '‚ú®', 'üí´', 'üåü',
      'üëç', 'üôå', 'üí™', 'üòä', 'ü§©', 'üòé', 'üíñ', 'üéâ', 'ü•≥', '‚òÄÔ∏è'
    ];

    const usedMessages = new Set<string>();

    const generateUniqueMessage = (): string => {
      let attempts = 0;
      let message: string;
      
      do {
        const baseMessage = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
        const shouldAddReaction = Math.random() < 0.3;
        const shouldModify = Math.random() < 0.4;
        
        message = baseMessage;
        
        if (shouldModify) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
          const modifications = [
            () => message + '!!!',
            () => message + ' üòä',
            () => message.replace('!', '!!!'),
            () => message + ' –°–æ–≥–ª–∞—Å–µ–Ω!',
            () => '+1 ' + message,
            () => message + ' üíØ',
            () => '–î–∞! ' + message,
            () => message + ' –ö—Ä—É—Ç–æ!',
          ];
          const modification = modifications[Math.floor(Math.random() * modifications.length)];
          message = modification();
        }
        
        if (shouldAddReaction) {
          const reaction = reactions[Math.floor(Math.random() * reactions.length)];
          message += ' ' + reaction;
        }
        
        attempts++;
      } while (usedMessages.has(message) && attempts < 20);
      
      if (attempts >= 20) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å timestamp
        message = messageTemplates[Math.floor(Math.random() * messageTemplates.length)] + ' ' + Date.now().toString().slice(-3);
      }
      
      usedMessages.add(message);
      return message;
    };

    const addBotMessage = () => {
      const randomUser = userNames[Math.floor(Math.random() * userNames.length)];
      const messageText = generateUniqueMessage();
      
      const botMessage: Message = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        text: messageText,
        author: randomUser,
        timestamp: new Date(),
        type: 'text',
        isOwnMessage: false
      };

      setMessages(prev => [...prev, botMessage]);
    };

    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥
    const firstTimeout = setTimeout(addBotMessage, Math.random() * 20000 + 10000);

    // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30-120 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      addBotMessage();
    }, Math.random() * 90000 + 30000);

    return () => {
      clearTimeout(firstTimeout);
      clearInterval(interval);
    };
  }, []);

  const sendMessage = () => {
    if (!newMessage.trim()) return;

    const message: Message = {
      id: Date.now().toString(),
      text: newMessage,
      author: userName,
      timestamp: new Date(),
      type: 'text',
      isOwnMessage: true
    };

    setMessages(prev => [...prev, message]);
    setNewMessage('');
    setShowEmojiPicker(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleEmojiSelect = (emoji: string) => {
    setNewMessage(prev => prev + emoji);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const imageUrl = event.target?.result as string;
        const message: Message = {
          id: Date.now().toString(),
          text: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          author: userName,
          timestamp: new Date(),
          type: 'image',
          imageUrl,
          isOwnMessage: true
        };
        setMessages(prev => [...prev, message]);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex flex-col">
      {/* Header */}
      <header className="bg-black/30 backdrop-blur-md border-b border-white/10 p-4">
        <div className="flex items-center justify-between">
          <button
            onClick={() => navigate('/')}
            className="flex items-center gap-2 text-white hover:text-purple-300 transition-colors"
          >
            <Icon name="ArrowLeft" size={20} />
            <span className="hidden sm:inline">–ù–∞–∑–∞–¥ –∫ —Ä–∞–¥–∏–æ</span>
          </button>
          
          <div className="text-center">
            <h1 className="text-xl font-bold text-white">–û–Ω–ª–∞–π–Ω —á–∞—Ç</h1>
            <p className="text-sm text-gray-400">–†–∞–¥–∏–æ Noumi</p>
          </div>

          <div className="text-sm text-green-400 flex items-center gap-1">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <div className="flex flex-col items-end">
              <span className="font-medium">{formatNumber(onlineCount)}</span>
              <span className="text-xs text-gray-400">–æ–Ω–ª–∞–π–Ω</span>
            </div>
          </div>
        </div>
      </header>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        <div className="max-w-4xl mx-auto space-y-4">
          {messages.map((message) => (
            <ChatMessage key={message.id} message={message} />
          ))}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <div className="bg-black/30 backdrop-blur-md border-t border-white/10 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-2 sm:gap-3">
            {/* Image Upload */}
            <button
              onClick={() => fileInputRef.current?.click()}
              className="flex-shrink-0 p-2 sm:p-3 bg-white/10 hover:bg-white/20 rounded-lg transition-colors text-gray-300 hover:text-white"
            >
              <Icon name="Image" size={18} />
            </button>
            <input
              type="file"
              ref={fileInputRef}
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden"
            />

            {/* Message Input */}
            <div className="flex-1 relative">
              <textarea
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 max-h-32"
                rows={1}
                style={{ minHeight: '48px' }}
              />
              
              {/* Emoji Button */}
              <button
                onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                className="absolute right-2 top-1/2 -translate-y-1/2 p-1 hover:bg-white/10 rounded transition-colors"
              >
                <Icon name="Smile" size={18} className="text-gray-400 hover:text-white" />
              </button>

              {/* Emoji Picker */}
              {showEmojiPicker && (
                <div className="absolute bottom-full right-0 mb-2">
                  <EmojiPicker onEmojiSelect={handleEmojiSelect} />
                </div>
              )}
            </div>

            {/* Send Button */}
            <button
              onClick={sendMessage}
              disabled={!newMessage.trim()}
              className="flex-shrink-0 p-2 sm:p-3 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-all text-white"
            >
              <Icon name="Send" size={18} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;