import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import Icon from "@/components/ui/icon";

interface ReviewMessage {
  id: string;
  phoneNumber: string;
  message: string;
  language: string;
  timestamp: Date;
}

const AutoMessageGenerator = () => {
  const [isActive, setIsActive] = useState(false);
  const [sentMessages, setSentMessages] = useState<ReviewMessage[]>([]);
  const [nextMessageTime, setNextMessageTime] = useState<Date | null>(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  const generateUniquePhoneNumber = (usedNumbers: string[]): string => {
    const operators = [
      "904",
      "905",
      "906",
      "908",
      "909",
      "950",
      "951",
      "952",
      "953",
      "960",
      "961",
      "962",
      "963",
      "964",
      "965",
      "966",
      "967",
      "968",
      "969",
    ];
    let phoneNumber: string;

    do {
      const operator = operators[Math.floor(Math.random() * operators.length)];
      const part1 = Math.floor(Math.random() * 900) + 100;
      const part2 = Math.floor(Math.random() * 90) + 10;
      const part3 = Math.floor(Math.random() * 90) + 10;
      phoneNumber = `+7 ${operator} ${part1}-${part2}-${part3}`;
    } while (usedNumbers.includes(phoneNumber));

    return phoneNumber;
  };

  // –û—Ç–∑—ã–≤—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
  const generateUniqueReview = (
    usedReviews: string[],
  ): { message: string; language: string } => {
    const reviews = [
      // –†—É—Å—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message:
          "–ü–æ—Ç—Ä—è—Å–∞—é—â–∞—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è! Radio Noumi –∏–≥—Ä–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –º–æ–µ–π –¥—É—à–µ üéµ",
        language: "–†—É—Å—Å–∫–∏–π",
      },
      {
        message:
          "–°–ª—É—à–∞—é Radio Noumi —É–∂–µ –ø–æ–ª–≥–æ–¥–∞ - –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ, –º—É–∑—ã–∫–∞ –≤—Å–µ–≥–¥–∞ –≤ —Ç–µ–º—É!",
        language: "–†—É—Å—Å–∫–∏–π",
      },
      {
        message:
          "Radio Noumi - –º–æ–π —Å–ø—É—Ç–Ω–∏–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ç—Ä–µ–∫–æ–≤! üëç",
        language: "–†—É—Å—Å–∫–∏–π",
      },
      {
        message:
          "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∫–æ–º–∞–Ω–¥—É Radio Noumi –∑–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é –º—É–∑—ã–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—â–∞–Ω–∏–µ",
        language: "–†—É—Å—Å–∫–∏–π",
      },
      {
        message:
          "Radio Noumi - —ç—Ç–æ –ª—É—á—à–µ–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–∏–º–∏ –Ω–∞—É—à–Ω–∏–∫–∞–º–∏! –ú—É–∑—ã–∫–∞ –æ–≥–æ–Ω—å üî•",
        language: "–†—É—Å—Å–∫–∏–π",
      },

      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message:
          "Amazing radio station! Radio Noumi has the best music selection üé∂",
        language: "English",
      },
      {
        message: "Love Radio Noumi! Great sound quality and fantastic playlist",
        language: "English",
      },
      {
        message: "Radio Noumi is my daily companion. Excellent music taste! üëå",
        language: "English",
      },
      {
        message:
          "Thanks Radio Noumi team for wonderful music and quality broadcasting",
        language: "English",
      },
      {
        message:
          "Radio Noumi rocks! The best radio station I've ever listened to üéµ",
        language: "English",
      },

      // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message:
          "Radio Noumi c'est magnifique! Excellente s√©lection musicale üéµ",
        language: "Fran√ßais",
      },
      {
        message:
          "J'adore Radio Noumi! Qualit√© sonore parfaite et playlist fantastique",
        language: "Fran√ßais",
      },
      {
        message:
          "Radio Noumi est ma station pr√©f√©r√©e. Musique exceptionnelle! üëç",
        language: "Fran√ßais",
      },

      // –ù–µ–º–µ—Ü–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message:
          "Radio Noumi ist fantastisch! Tolle Musikauswahl und perfekte Qualit√§t üé∂",
        language: "Deutsch",
      },
      {
        message:
          "Ich liebe Radio Noumi! Beste Radiostation mit gro√üartiger Musik",
        language: "Deutsch",
      },

      // –ò—Å–ø–∞–Ω—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message: "¬°Radio Noumi es incre√≠ble! Excelente selecci√≥n musical üéµ",
        language: "Espa√±ol",
      },
      {
        message:
          "Me encanta Radio Noumi! Calidad de sonido perfecta y gran m√∫sica",
        language: "Espa√±ol",
      },

      // –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
      {
        message: "Radio Noumi √® fantastica! Selezione musicale eccellente üé∂",
        language: "Italiano",
      },
      {
        message:
          "Amo Radio Noumi! Qualit√† del suono perfetta e playlist meravigliosa",
        language: "Italiano",
      },
    ];

    let availableReviews = reviews.filter(
      (review) => !usedReviews.includes(review.message),
    );

    if (availableReviews.length === 0) {
      // –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      const emotions = ["üéµ", "üé∂", "üî•", "üëç", "üëå", "‚ù§Ô∏è", "üåü", "‚ú®"];
      const baseReview = reviews[Math.floor(Math.random() * reviews.length)];
      const emotion = emotions[Math.floor(Math.random() * emotions.length)];
      return {
        message: baseReview.message + " " + emotion,
        language: baseReview.language,
      };
    }

    return availableReviews[
      Math.floor(Math.random() * availableReviews.length)
    ];
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–£—Ä–∞–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è UTC+5)
  const isAllowedTime = (): boolean => {
    const now = new Date();
    const uralTime = new Date(now.getTime() + 5 * 60 * 60 * 1000); // UTC+5
    const hour = uralTime.getHours();
    return hour >= 9 && hour < 23; // –†–∞–∑—Ä–µ—à–µ–Ω–æ —Å 09:00 –¥–æ 23:00
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp
  const sendWhatsAppMessage = (phoneNumber: string, message: string) => {
    const targetNumber = "+79049808275";
    const encodedMessage = encodeURIComponent(
      `–û—Ç–∑—ã–≤ –æ—Ç ${phoneNumber}:\n\n${message}`,
    );
    const whatsappUrl = `https://wa.me/${targetNumber.replace(/[^\d]/g, "")}?text=${encodedMessage}`;

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(whatsappUrl, "_blank");
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const generateAndSendMessage = () => {
    if (!isAllowedTime()) {
      console.log(
        "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (23:00 - 09:00 –£—Ä–∞–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)",
      );
      return;
    }

    const usedNumbers = sentMessages.map((msg) => msg.phoneNumber);
    const usedReviews = sentMessages.map((msg) => msg.message);

    const phoneNumber = generateUniquePhoneNumber(usedNumbers);
    const review = generateUniqueReview(usedReviews);

    const newMessage: ReviewMessage = {
      id: Date.now().toString(),
      phoneNumber,
      message: review.message,
      language: review.language,
      timestamp: new Date(),
    };

    setSentMessages((prev) => [...prev, newMessage]);
    sendWhatsAppMessage(phoneNumber, review.message);
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
  useEffect(() => {
    if (!isActive) return;

    const interval = setInterval(
      () => {
        generateAndSendMessage();
        // –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setNextMessageTime(new Date(Date.now() + 10 * 60 * 1000));
      },
      10 * 60 * 1000,
    ); // 10 –º–∏–Ω—É—Ç

    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (sentMessages.length === 0) {
      generateAndSendMessage();
      setNextMessageTime(new Date(Date.now() + 10 * 60 * 1000));
    }

    return () => clearInterval(interval);
  }, [isActive, sentMessages.length]);

  // –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    const timer = setInterval(() => {
      if (nextMessageTime) {
        setNextMessageTime(new Date(nextMessageTime.getTime()));
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [nextMessageTime]);

  const formatTimeUntilNext = (): string => {
    if (!nextMessageTime) return "‚Äî";
    const now = new Date();
    const diff = nextMessageTime.getTime() - now.getTime();
    if (diff <= 0) return "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...";

    const minutes = Math.floor(diff / 60000);
    const seconds = Math.floor((diff % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  return (
    <Card className="p-6 bg-white/10 backdrop-blur-md border-white/20">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-bold text-white flex items-center gap-2">
          <Icon name="MessageSquare" size={24} />
          –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ Radio Noumi
        </h3>
        <Button
          onClick={() => setIsActive(!isActive)}
          variant={isActive ? "destructive" : "default"}
          className="flex items-center gap-2"
        >
          <Icon name={isActive ? "Square" : "Play"} size={16} />
          {isActive ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å"}
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div className="bg-white/5 rounded-lg p-3">
          <div className="text-sm text-white/70">–°—Ç–∞—Ç—É—Å</div>
          <div className="text-lg font-semibold text-white">
            {isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
          </div>
        </div>
        <div className="bg-white/5 rounded-lg p-3">
          <div className="text-sm text-white/70">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
          <div className="text-lg font-semibold text-white">
            {sentMessages.length}
          </div>
        </div>
        <div className="bg-white/5 rounded-lg p-3">
          <div className="text-sm text-white/70">–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ</div>
          <div className="text-lg font-semibold text-white">
            {formatTimeUntilNext()}
          </div>
        </div>
      </div>

      {!isAllowedTime() && (
        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3 mb-4">
          <div className="flex items-center gap-2 text-yellow-200">
            <Icon name="Clock" size={16} />
            <span className="text-sm">
              –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å 23:00 –¥–æ 09:00 –ø–æ –£—Ä–∞–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            </span>
          </div>
        </div>
      )}

      <div className="max-h-60 overflow-y-auto">
        <h4 className="text-lg font-semibold text-white mb-2">
          –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:
        </h4>
        {sentMessages
          .slice(-5)
          .reverse()
          .map((msg) => (
            <div key={msg.id} className="bg-white/5 rounded-lg p-3 mb-2">
              <div className="flex justify-between items-start mb-1">
                <span className="text-sm text-white/70">{msg.phoneNumber}</span>
                <span className="text-xs text-white/50">{msg.language}</span>
              </div>
              <div className="text-sm text-white">{msg.message}</div>
              <div className="text-xs text-white/50 mt-1">
                {msg.timestamp.toLocaleTimeString()}
              </div>
            </div>
          ))}
      </div>
    </Card>
  );
};

export default AutoMessageGenerator;
