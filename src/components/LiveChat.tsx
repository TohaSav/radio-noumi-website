import { useState, useEffect, useRef } from "react";

interface ChatMessage {
  id: number;
  user: string;
  message: string;
  timestamp: Date;
}

interface LiveChatProps {
  activeUsers: number;
}

const LiveChat = ({ activeUsers }: LiveChatProps) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [messageId, setMessageId] = useState(0);
  const chatRef = useRef<HTMLDivElement>(null);

  const userNames = [
    "–ê–Ω–Ω–∞",
    "–ú–∞–∫—Å–∏–º",
    "–î–∞—Ä—å—è",
    "–ê–ª–µ–∫—Å–µ–π",
    "–°–æ—Ñ–∏—è",
    "–î–º–∏—Ç—Ä–∏–π",
    "–ú–∞—Ä–∏—è",
    "–ê—Ä—Ç–µ–º",
    "–ï–ª–µ–Ω–∞",
    "–ù–∏–∫–∏—Ç–∞",
    "–û–ª—å–≥–∞",
    "–°–µ—Ä–≥–µ–π",
    "–í–∏–∫—Ç–æ—Ä–∏—è",
    "–ê–Ω–¥—Ä–µ–π",
    "–ö—Ä–∏—Å—Ç–∏–Ω–∞",
    "–ò–≤–∞–Ω",
    "–ù–∞—Ç–∞–ª—å—è",
    "–ú–∏—Ö–∞–∏–ª",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
    "–ü–∞–≤–µ–ª",
    "–Æ–ª–∏—è",
    "–†–æ–º–∞–Ω",
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è",
    "–ò–≥–æ—Ä—å",
  ];

  const chatTopics = [
    "–ö–ª–∞—Å—Å–Ω–∞—è –º—É–∑—ã–∫–∞ —Å–µ–≥–æ–¥–Ω—è!",
    "–ê —á—Ç–æ –∑–∞ —Ç—Ä–µ–∫ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç?",
    "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
    "–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç üëå",
    "–î–∞–≤–Ω–æ —Å–ª—É—à–∞—é —ç—Ç–æ —Ä–∞–¥–∏–æ",
    "–ö—Ç–æ —Ç—É—Ç –∏–∑ –ú–æ—Å–∫–≤—ã?",
    "–°—É–ø–µ—Ä –∑–≤—É–∫!",
    "–ê –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ —ç—Ñ–∏—Ä–∞?",
    "–õ—é–±–ª—é —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é ‚ù§Ô∏è",
    "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É –º—É–∑—ã–∫–∏!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ö–æ—Ä–æ—à—É—é –º—É–∑—ã–∫—É",
    "–ö—Ç–æ –µ—â–µ –Ω–µ —Å–ø–∏—Ç?",
    "–û—Ç–ª–∏—á–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –º—É–∑—ã–∫–∏",
    "–ê —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?",
    "–ö—Ä—É—Ç–æ –∑–≤—É—á–∏—Ç!",
    "–ü—Ä–∏–≤–µ—Ç –∏–∑ –ü–∏—Ç–µ—Ä–∞!",
    "–£–∂–µ —á–∞—Å —Å–ª—É—à–∞—é",
    "–ú—É–∑—ã–∫–∞ –æ–≥–æ–Ω—å üî•",
    "–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
    "–ê –¥–∏–¥–∂–µ–π —Å–µ–≥–æ–¥–Ω—è –∫—Ç–æ?",
    "–ö–ª–∞—Å—Å–Ω—ã–π –±–∏—Ç!",
    "–î–∞–≤–Ω–æ –∏—Å–∫–∞–ª —Ç–∞–∫—É—é –º—É–∑—ã–∫—É",
    "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç –∏–∑ —á–∞—Ç–∞!",
    "–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞...",
    "–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å",
  ];

  useEffect(() => {
    const addMessage = () => {
      const randomUser =
        userNames[Math.floor(Math.random() * userNames.length)];
      const randomTopic =
        chatTopics[Math.floor(Math.random() * chatTopics.length)];

      const newMessage: ChatMessage = {
        id: messageId,
        user: randomUser,
        message: randomTopic,
        timestamp: new Date(),
      };

      setMessages((prev) => {
        const updated = [...prev, newMessage].slice(-50); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        return updated;
      });

      setMessageId((prev) => prev + 1);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(() => {
      addMessage();
    }, 3000);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    setTimeout(() => addMessage(), 1000);
    setTimeout(() => addMessage(), 3000);
    setTimeout(() => addMessage(), 5000);

    return () => clearInterval(interval);
  }, [messageId]);

  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-4 text-white">
        <h3 className="font-semibold">–ñ–∏–≤–æ–π —á–∞—Ç</h3>
        <p className="text-sm opacity-90">
          {Math.floor(activeUsers / 1000)}k –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        </p>
      </div>

      <div ref={chatRef} className="h-80 overflow-y-auto p-4 space-y-3">
        {messages.map((msg) => (
          <div key={msg.id} className="animate-fade-in">
            <div className="flex items-start space-x-2">
              <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm font-semibold">
                {msg.user[0]}
              </div>
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="font-semibold text-gray-800">
                    {msg.user}
                  </span>
                  <span className="text-xs text-gray-500">
                    {msg.timestamp.toLocaleTimeString("ru-RU", {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </span>
                </div>
                <p className="text-gray-700 text-sm">{msg.message}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="p-4 border-t bg-gray-50">
        <div className="flex space-x-2">
          <input
            type="text"
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
            disabled
          />
          <button
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            disabled
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default LiveChat;
