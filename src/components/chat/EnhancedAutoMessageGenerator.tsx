import { useEffect, useState } from "react";

interface Message {
  id: string;
  userName: string;
  message: string;
  timestamp: Date;
  avatar: string;
  type: "text" | "image" | "video";
  mediaUrl?: string;
}

interface EnhancedAutoMessageGeneratorProps {
  onMessageGenerated: (message: Message) => void;
  activeUsers: Array<{ id: string; name: string; avatar: string }>;
}

const EnhancedAutoMessageGenerator = ({
  onMessageGenerated,
  activeUsers,
}: EnhancedAutoMessageGeneratorProps) => {
  const [usedContent, setUsedContent] = useState<Set<string>>(new Set());
  const [messageVariations, setMessageVariations] = useState<
    Map<string, number>
  >(new Map());

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  const messageTemplates = {
    greetings: [
      "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!",
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
      "–•–æ—Ä–æ—à–µ–≥–æ –≤—Å–µ–º –¥–Ω—è!",
      "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏!",
      "–°–∞–ª—é—Ç –≤—Å–µ–º!",
      "–ü—Ä–∏–≤–µ—Ç, –Ω–∞—Ä–æ–¥!",
      "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!",
      "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!",
      "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!",
      "–ö–∞–∫ –¥–µ–ª–∞ —É –≤—Å–µ—Ö?",
      "–í—Å–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
      "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!",
      "–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!",
      "–û—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    ],
    music: [
      "–û—Ç–ª–∏—á–Ω–∞—è –º—É–∑—ã–∫–∞ —Å–µ–≥–æ–¥–Ω—è",
      "–ö–ª–∞—Å—Å–Ω—ã–π —Ç—Ä–µ–∫ –∏–≥—Ä–∞–µ—Ç",
      "–û–±–æ–∂–∞—é —ç—Ç—É –ø–µ—Å–Ω—é",
      "–ö—Ç–æ –∑–Ω–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?",
      "–î–æ–±–∞–≤–ª—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
      "–ú—É–∑—ã–∫–∞ –æ–≥–æ–Ω—å",
      "–û—Ç–ª–∏—á–Ω—ã–π —Å–∞—É–Ω–¥",
      "–•–∏—Ç —Å–µ–∑–æ–Ω–∞",
      "–ú–æ—è –ª—é–±–∏–º–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è",
      "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "–ú—É–∑—ã–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
    ],
    life: [
      "–¢–æ–ª—å–∫–æ —á—Ç–æ —Å —Ä–∞–±–æ—Ç—ã",
      "–ì–æ—Ç–æ–≤–ª—é —É–∂–∏–Ω",
      "–ß–∏—Ç–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É",
      "–°–º–æ—Ç—Ä—é –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º",
      "–í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å –¥—Ä—É–∑—å—è–º–∏",
      "–ì—É–ª—è—é –ø–æ –≥–æ—Ä–æ–¥—É",
      "–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º",
      "–û—Ç–¥—ã—Ö–∞—é –¥–æ–º–∞",
      "–ì–æ—Ç–æ–≤–ª—é –∑–∞–≤—Ç—Ä–∞–∫",
      "–í –æ—Ç–ø—É—Å–∫–µ",
      "–ù–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö",
      "–ü–ª–∞–Ω–∏—Ä—É—é –≤–µ—á–µ—Ä",
      "–ü–æ–∫—É–ø–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã",
    ],
    reactions: [
      "–°–æ–≥–ª–∞—Å–µ–Ω!",
      "–¢–æ—á–Ω–æ!",
      "–î–∞, –∫–ª–∞—Å—Å–Ω–æ!",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é",
      "–û—Ç–ª–∏—á–Ω–æ —Å–∫–∞–∑–∞–Ω–æ!",
      "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫",
      "–ö—Ä—É—Ç–æ!",
      "–°—É–ø–µ—Ä!",
      "–ú–æ–ª–æ–¥–µ—Ü!",
      "–ë—Ä–∞–≤–æ!",
      "–®–∏–∫–∞—Ä–Ω–æ!",
      "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
      "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!",
      "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
    ],
    questions: [
      "–ö—Ç–æ —Ç—É—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π?",
      "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
      "–ß—Ç–æ —Å–ª—É—à–∞–µ—Ç–µ?",
      "–û—Ç–∫—É–¥–∞ –≤—ã?",
      "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å?",
      "–ü–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
      "–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏?",
      "–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
      "–ö—Ç–æ –∏–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã?",
      "–ï—Å—Ç—å –ø–∏—Ç–æ–º—Ü—ã?",
    ],
    activities: [
      "–ò–¥—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª",
      "–ì–æ—Ç–æ–≤–ª—é —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ",
      "–ß–∏—Ç–∞—é –Ω–æ–≤–æ—Å—Ç–∏",
      "–°–º–æ—Ç—Ä—é —Å–µ—Ä–∏–∞–ª",
      "–°–ª—É—à–∞—é –ø–æ–¥–∫–∞—Å—Ç",
      "–£–±–∏—Ä–∞—é—Å—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ",
      "–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
      "–ò–∑—É—á–∞—é —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ",
      "–ì—É–ª—è—é —Å —Å–æ–±–∞–∫–æ–π",
      "–í—Å—Ç—Ä–µ—á–∞—é—Å—å —Å —Å–µ–º—å–µ–π",
      "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É",
      "–ì–æ—Ç–æ–≤–ª—é—Å—å –∫–æ —Å–Ω—É",
    ],
  };

  const emojis = [
    "üòä",
    "üéµ",
    "‚ú®",
    "üëç",
    "üî•",
    "üí™",
    "üåü",
    "‚ù§Ô∏è",
    "üéâ",
    "üòÑ",
    "üé∂",
    "üåà",
    "‚òÄÔ∏è",
    "üé∏",
    "üé§",
    "üéß",
    "üì±",
    "üí´",
    "üöÄ",
    "üé≠",
  ];

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–æ—Ç–æ —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
  const photoCategories = {
    food: {
      baseUrls: [
        "https://images.unsplash.com/photo-1546069901-ba9599a7e63c",
        "https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b",
        "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445",
        "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
        "https://images.unsplash.com/photo-1555939594-58d7cb561ad1",
        "https://images.unsplash.com/photo-1548940740-204726a19be3",
      ],
      messages: [
        "–ú–æ–π –æ–±–µ–¥ –≥–æ—Ç–æ–≤",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —É–∂–∏–Ω",
        "–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ —Å—Ç–æ–ª–µ",
        "–ü–µ—Ä–µ–∫—É—Å",
        "–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
        "–î–æ–º–∞—à–Ω—è—è –≤—ã–ø–µ—á–∫–∞",
        "–ú–º–º, –≤–∫—É—Å–Ω–æ",
        "–ì–æ—Ç–æ–≤–ª—é —Å –ª—é–±–æ–≤—å—é",
        "–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã",
      ],
    },
    nature: {
      baseUrls: [
        "https://images.unsplash.com/photo-1441974231531-c6227db76b6e",
        "https://images.unsplash.com/photo-1506905925346-21bda4d32df4",
        "https://images.unsplash.com/photo-1418065460487-3956ef138ddb",
        "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b",
        "https://images.unsplash.com/photo-1506905925346-21bda4d32df4",
      ],
      messages: [
        "–ù–∞ –ø—Ä–æ–≥—É–ª–∫–µ",
        "–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥",
        "–û—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
        "–í –ø–∞—Ä–∫–µ",
        "–°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö",
        "–õ—é–±—É—é—Å—å –ø–µ–π–∑–∞–∂–µ–º",
        "–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞",
      ],
    },
    pets: {
      baseUrls: [
        "https://images.unsplash.com/photo-1574158622682-e40e69881006",
        "https://images.unsplash.com/photo-1596854407944-bf87f6fdd49e",
        "https://images.unsplash.com/photo-1583337130417-3346a1be7dee",
      ],
      messages: ["–ú–æ–π –ø–∏—Ç–æ–º–µ—Ü", "–ü—É—à–∏—Å—Ç—ã–π –¥—Ä—É–≥", "–ò–≥—Ä–∞–µ–º –≤–º–µ—Å—Ç–µ", "–ú–∏–ª–∞—à–∫–∞"],
    },
    city: {
      baseUrls: [
        "https://images.unsplash.com/photo-1519501025264-65ba15a82390",
        "https://images.unsplash.com/photo-1477959858617-67f85cf4f1df",
        "https://images.unsplash.com/photo-1514565131-fce0801e5785",
      ],
      messages: [
        "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –≤–∏–¥—ã",
        "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É",
        "–ö—Ä–∞—Å–∏–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
      ],
    },
  };

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const generateUniqueVideo = () => {
    const videoTypes = [
      "SampleVideo_1280x720_1mb",
      "SampleVideo_640x360_1mb",
      "SampleVideo_1280x720_2mb",
    ];
    const videoType = videoTypes[Math.floor(Math.random() * videoTypes.length)];
    const timestamp = Date.now();
    const randomParam = Math.floor(Math.random() * 10000);

    return {
      url: `https://sample-videos.com/zip/10/mp4/${videoType}.mp4?t=${timestamp}&r=${randomParam}`,
      message: [
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ!",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ",
        "–ö–ª–∞—Å—Å–Ω—ã–π —Ä–æ–ª–∏–∫",
        "–°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—à–µ–ª",
        "–ó–∞–±–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ",
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
      ][Math.floor(Math.random() * 6)],
    };
  };

  const generateUniqueMessage = () => {
    if (!activeUsers.length) return null;

    const user = activeUsers[Math.floor(Math.random() * activeUsers.length)];
    const messageType = Math.random();
    const timestamp = Date.now();

    // 15% - –≤–∏–¥–µ–æ, 25% - —Ñ–æ—Ç–æ, 60% - —Ç–µ–∫—Å—Ç
    if (messageType < 0.15) {
      // –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const video = generateUniqueVideo();
      const contentKey = `video_${timestamp}_${user.id}`;

      if (usedContent.has(contentKey)) return null;

      return {
        id: `msg_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
        userName: user.name,
        message: video.message,
        timestamp: new Date(),
        avatar: user.avatar,
        type: "video" as const,
        mediaUrl: video.url,
        contentKey,
      };
    } else if (messageType < 0.4) {
      // –§–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const categories = Object.keys(photoCategories);
      const category =
        categories[Math.floor(Math.random() * categories.length)];
      const categoryData =
        photoCategories[category as keyof typeof photoCategories];

      const baseUrl =
        categoryData.baseUrls[
          Math.floor(Math.random() * categoryData.baseUrls.length)
        ];
      const uniqueUrl = `${baseUrl}?w=400&h=400&fit=crop&t=${timestamp}&u=${user.id}&r=${Math.random()}`;
      const message =
        categoryData.messages[
          Math.floor(Math.random() * categoryData.messages.length)
        ];

      const contentKey = `photo_${category}_${timestamp}_${user.id}`;
      if (usedContent.has(contentKey)) return null;

      return {
        id: `msg_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
        userName: user.name,
        message: message,
        timestamp: new Date(),
        avatar: user.avatar,
        type: "image" as const,
        mediaUrl: uniqueUrl,
        contentKey,
      };
    } else {
      // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const templateCategories = Object.keys(messageTemplates);
      const category =
        templateCategories[
          Math.floor(Math.random() * templateCategories.length)
        ];
      const templates =
        messageTemplates[category as keyof typeof messageTemplates];

      let baseMessage = templates[Math.floor(Math.random() * templates.length)];

      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageKey = `${category}_${baseMessage}`;
      const variation = messageVariations.get(messageKey) || 0;

      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞—Ü–∏–∏
      if (variation > 0) {
        if (Math.random() < 0.5) {
          baseMessage += ` ${emojis[Math.floor(Math.random() * emojis.length)]}`;
        }
        if (Math.random() < 0.3) {
          const modifiers = [
            "–∫—Å—Ç–∞—Ç–∏",
            "–º–µ–∂–¥—É –ø—Ä–æ—á–∏–º",
            "–≤–æ–æ–±—â–µ",
            "—Å–µ–≥–æ–¥–Ω—è",
            "—Å–µ–π—á–∞—Å",
          ];
          baseMessage =
            modifiers[Math.floor(Math.random() * modifiers.length)] +
            ", " +
            baseMessage.toLowerCase();
        }
      }

      const contentKey = `text_${messageKey}_${variation}_${user.id}`;
      if (usedContent.has(contentKey)) return null;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∞—Ä–∏–∞—Ü–∏–π
      setMessageVariations(
        (prev) => new Map(prev.set(messageKey, variation + 1)),
      );

      return {
        id: `msg_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
        userName: user.name,
        message: baseMessage,
        timestamp: new Date(),
        avatar: user.avatar,
        type: "text" as const,
        contentKey,
      };
    }
  };

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const stored = localStorage.getItem("unique-chat-content");
    if (stored) {
      try {
        setUsedContent(new Set(JSON.parse(stored)));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
      }
    }

    const messageInterval = setInterval(
      () => {
        const message = generateUniqueMessage();
        if (message) {
          onMessageGenerated(message);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          setUsedContent((prev) => {
            const newSet = new Set([...prev, message.contentKey]);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2000 –∑–∞–ø–∏—Å–µ–π)
            if (newSet.size > 2000) {
              const array = Array.from(newSet);
              return new Set(array.slice(-1500));
            }

            return newSet;
          });
        }
      },
      2000 + Math.random() * 8000,
    ); // 2-10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    return () => clearInterval(messageInterval);
  }, [activeUsers]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (usedContent.size > 0) {
      try {
        localStorage.setItem(
          "unique-chat-content",
          JSON.stringify([...usedContent]),
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
      }
    }
  }, [usedContent]);

  return null;
};

export default EnhancedAutoMessageGenerator;
