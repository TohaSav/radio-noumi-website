import { useEffect, useState, useRef } from "react";

interface Message {
  id: string;
  userName: string;
  message: string;
  timestamp: Date;
  avatar: string;
  type: "text" | "image" | "video" | "reaction";
  mediaUrl?: string;
  replyTo?: string;
  isTyping?: boolean;
}

interface User {
  id: string;
  name: string;
  avatar: string;
  lastActivity: Date;
  isActive: boolean;
  personality: "friendly" | "casual" | "energetic" | "thoughtful" | "funny";
  interests: string[];
  mood: "happy" | "excited" | "calm" | "curious" | "creative";
}

interface RealisticMessageGeneratorProps {
  onMessageGenerated: (message: Message) => void;
  activeUsers: User[];
  recentMessages: Message[];
}

const RealisticMessageGenerator = ({
  onMessageGenerated,
  activeUsers,
  recentMessages,
}: RealisticMessageGeneratorProps) => {
  const [conversationContext, setConversationContext] = useState<string[]>([]);
  const [activeTopics, setActiveTopics] = useState<string[]>([]);
  const [typingUsers, setTypingUsers] = useState<Set<string>>(new Set());
  const messageQueue = useRef<{ user: User; message: string; delay: number }[]>(
    [],
  );

  // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
  const conversationTopics = {
    weather: [
      "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞!",
      "–î–æ–∂–¥—å –Ω–∞ —É–ª–∏—Ü–µ, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ",
      "–°–æ–ª–Ω—Ü–µ –Ω–∞–∫–æ–Ω–µ—Ü –≤—ã–≥–ª—è–Ω—É–ª–æ ‚òÄÔ∏è",
      "–°–Ω–µ–≥ –∏–¥—ë—Ç, –∫—Ä–∞—Å–æ—Ç–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è",
      "–ñ–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ —ç—Ç–æ –ª—É—á—à–µ —Ö–æ–ª–æ–¥–∞",
    ],
    work: [
      "–¢–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç—ã, —É—Å—Ç–∞–ª –Ω–æ –¥–æ–≤–æ–ª–µ–Ω",
      "–ó–∞–≤—Ç—Ä–∞ –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞, –≤–æ–ª–Ω—É—é—Å—å",
      "–ü–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ! üéâ",
      "–ö–æ–ª–ª–µ–≥–∏ —Ç–∞–∫–∏–µ –∫–ª–∞—Å—Å–Ω—ã–µ —É –º–µ–Ω—è",
      "–î–æ–º–∞—à–Ω–∏–π –æ—Ñ–∏—Å - —ç—Ç–æ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞",
    ],
    hobbies: [
      "–ù–∞—á–∞–ª —á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É, –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç",
      "–í—á–µ—Ä–∞ –±—ã–ª –≤ —Ç–µ–∞—Ç—Ä–µ, –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Å–ø–µ–∫—Ç–∞–∫–ª—å",
      "–ì–æ—Ç–æ–≤–ª—é –Ω–æ–≤–æ–µ –±–ª—é–¥–æ, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã üë®‚Äçüç≥",
      "–•–æ–∂—É –Ω–∞ –π–æ–≥—É, –æ—á–µ–Ω—å —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç",
      "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—é –∑–∞–∫–∞—Ç—ã, –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª–µ–Ω",
    ],
    mood: [
      "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä —Å–µ–≥–æ–¥–Ω—è! üòä",
      "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—á–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ",
      "–î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è –æ—Ç–ª–∏—á–Ω–æ",
      "–≠–Ω–µ—Ä–≥–∏–∏ –º–æ—Ä–µ, –≥–æ—Ç–æ–≤ –≥–æ—Ä—ã —Å–≤–µ—Ä–Ω—É—Ç—å",
      "–¢–∞–∫–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –Ω–∞ –¥—É—à–µ",
    ],
    food: [
      "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –±–æ—Ä—â, –ø–æ–ª—É—á–∏–ª—Å—è –∏–¥–µ–∞–ª—å–Ω—ã–π",
      "–ó–∞–∫–∞–∑–∞–ª –ø–∏—Ü—Ü—É, –Ω–µ –º–æ–≥—É —É—Å—Ç–æ—è—Ç—å",
      "–î–æ–º–∞—à–Ω–∏–µ –±–ª–∏–Ω—á–∏–∫–∏ —Å —É—Ç—Ä–∞ - —Å—á–∞—Å—Ç—å–µ",
      "–û—Ç–∫—Ä—ã–ª –¥–ª—è —Å–µ–±—è –Ω–æ–≤–æ–µ –∫–∞—Ñ–µ —Ä—è–¥–æ–º",
      "–ì–æ—Ç–æ–≤–ª—é —É–∂–∏–Ω –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏",
    ],
    social: [
      "–í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏",
      "–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
      "–ë—ã–ª –Ω–∞ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ–ª–∏ –≤—Ä–µ–º—è",
      "–°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω —Å–µ–≥–æ–¥–Ω—è, —Å–æ–±–∏—Ä–∞–µ–º—Å—è –≤—Å–µ",
      "–ì—É–ª—è–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–æ–¥–∞, –∫—Ä–∞—Å–∏–≤–æ",
    ],
  };

  // –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö
  const reactions = {
    agreement: [
      "–¢–æ—á–Ω–æ!",
      "–°–æ–≥–ª–∞—Å–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é",
      "–î–∞, –∏–º–µ–Ω–Ω–æ —Ç–∞–∫!",
      "üëç",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é",
    ],
    excitement: [
      "–í–∞—É, –∫—Ä—É—Ç–æ!",
      "–≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
      "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ!",
      "üî•",
      "–°—É–ø–µ—Ä!",
    ],
    empathy: [
      "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è",
      "–°–æ—á—É–≤—Å—Ç–≤—É—é",
      "–î–µ—Ä–∂–∏—Å—å!",
      "–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ",
      "‚ù§Ô∏è",
    ],
    curiosity: [
      "–ê —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
      "–ö–∞–∫ —ç—Ç–æ –±—ã–ª–æ?",
      "ü§î",
      "–ê —á—Ç–æ –¥–∞–ª—å—à–µ?",
    ],
    humor: [
      "–•–∞-—Ö–∞, —Å–º–µ—à–Ω–æ! üòÑ",
      "–¢—ã –º–µ–Ω—è —Ä–∞—Å—Å–º–µ—à–∏–ª",
      "–ö–ª–∞—Å—Å–Ω–∞—è —à—É—Ç–∫–∞!",
      "üòÇ",
      "–Æ–º–æ—Ä–∏—Å—Ç!",
    ],
  };

  // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
  const conversationStarters = [
    "–ö—Å—Ç–∞—Ç–∏, –∞ –≤—ã –∑–Ω–∞–ª–∏ —á—Ç–æ...",
    "–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º,",
    "–ê —è —Ç—É—Ç –Ω–µ–¥–∞–≤–Ω–æ...",
    "–ì–æ–≤–æ—Ä—è –æ–± —ç—Ç–æ–º,",
    "–≠—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –º–Ω–µ...",
  ];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
  const detectMessageMood = (message: string): string => {
    const lowerMsg = message.toLowerCase();
    if (
      lowerMsg.includes("–æ—Ç–ª–∏—á–Ω–æ") ||
      lowerMsg.includes("—Å—É–ø–µ—Ä") ||
      lowerMsg.includes("–∫—Ä—É—Ç–æ")
    )
      return "excited";
    if (lowerMsg.includes("—Å–ø–æ–∫–æ–π–Ω–æ") || lowerMsg.includes("—Ä–∞—Å—Å–ª–∞–±"))
      return "calm";
    if (
      lowerMsg.includes("–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ") ||
      lowerMsg.includes("–∫–∞–∫") ||
      lowerMsg.includes("—á—Ç–æ")
    )
      return "curious";
    if (
      lowerMsg.includes("üòä") ||
      lowerMsg.includes("üëç") ||
      lowerMsg.includes("üéâ")
    )
      return "happy";
    return "neutral";
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const generateReaction = (
    lastMessage: Message,
    reactingUser: User,
  ): string | null => {
    if (!lastMessage || lastMessage.userName === reactingUser.name) return null;

    const mood = detectMessageMood(lastMessage.message);
    const userPersonality = reactingUser.personality;

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
    const reactionChance =
      userPersonality === "friendly"
        ? 0.4
        : userPersonality === "energetic"
          ? 0.5
          : userPersonality === "funny"
            ? 0.3
            : 0.2;

    if (Math.random() > reactionChance) return null;

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    let reactionType: keyof typeof reactions;

    switch (mood) {
      case "excited":
        reactionType = Math.random() < 0.6 ? "excitement" : "agreement";
        break;
      case "curious":
        reactionType = "curiosity";
        break;
      case "happy":
        reactionType = userPersonality === "funny" ? "humor" : "agreement";
        break;
      default:
        reactionType = "agreement";
    }

    const possibleReactions = reactions[reactionType];
    return possibleReactions[
      Math.floor(Math.random() * possibleReactions.length)
    ];
  };

  // –°–æ–∑–¥–∞—ë–º –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const generateContextualMessage = (user: User): string => {
    const lastMessages = recentMessages.slice(-3);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è
    if (lastMessages.length > 0 && Math.random() < 0.3) {
      const reaction = generateReaction(
        lastMessages[lastMessages.length - 1],
        user,
      );
      if (reaction) return reaction;
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (activeTopics.length > 0 && Math.random() < 0.4) {
      const topic =
        activeTopics[Math.floor(Math.random() * activeTopics.length)];
      const topicMessages =
        conversationTopics[topic as keyof typeof conversationTopics];

      if (Math.random() < 0.3) {
        const starter =
          conversationStarters[
            Math.floor(Math.random() * conversationStarters.length)
          ];
        return `${starter} ${topicMessages[Math.floor(Math.random() * topicMessages.length)].toLowerCase()}`;
      }

      return topicMessages[Math.floor(Math.random() * topicMessages.length)];
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInterests = user.interests;
    const availableTopics = Object.keys(conversationTopics);
    const relevantTopic =
      availableTopics.find((topic) => userInterests.includes(topic)) ||
      availableTopics[Math.floor(Math.random() * availableTopics.length)];

    const topicMessages =
      conversationTopics[relevantTopic as keyof typeof conversationTopics];
    const message =
      topicMessages[Math.floor(Math.random() * topicMessages.length)];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
    setActiveTopics((prev) => {
      const newTopics = [...prev];
      if (!newTopics.includes(relevantTopic)) {
        newTopics.push(relevantTopic);
        if (newTopics.length > 3) newTopics.shift();
      }
      return newTopics;
    });

    return message;
  };

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
  const simulateTyping = (user: User, duration: number) => {
    setTypingUsers((prev) => new Set([...prev, user.id]));

    setTimeout(() => {
      setTypingUsers((prev) => {
        const newSet = new Set(prev);
        newSet.delete(user.id);
        return newSet;
      });
    }, duration);
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const generateRealisticMessage = () => {
    if (!activeUsers.length) return;

    const user = activeUsers[Math.floor(Math.random() * activeUsers.length)];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (typingUsers.has(user.id)) return;

    const message = generateContextualMessage(user);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è)
    const typingDuration = Math.min(
      message.length * 50 + Math.random() * 2000,
      5000,
    );

    simulateTyping(user, typingDuration);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ "–Ω–∞–±–æ—Ä–∞"
    setTimeout(() => {
      const newMessage: Message = {
        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        userName: user.name,
        message,
        timestamp: new Date(),
        avatar: user.avatar,
        type: "text",
      };

      onMessageGenerated(newMessage);
    }, typingDuration);
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const messageInterval = setInterval(
      () => {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const messageChance = Math.min(activeUsers.length * 0.02, 0.8);

        if (Math.random() < messageChance) {
          generateRealisticMessage();
        }
      },
      3000 + Math.random() * 7000,
    ); // 3-10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    return () => clearInterval(messageInterval);
  }, [activeUsers, recentMessages, activeTopics]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
  useEffect(() => {
    const topicRefreshInterval = setInterval(() => {
      if (Math.random() < 0.3) {
        setActiveTopics((prev) => {
          if (prev.length > 0) {
            return prev.slice(1); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É
          }
          return prev;
        });
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(topicRefreshInterval);
  }, []);

  return (
    <div className="fixed bottom-4 left-4 z-10">
      {typingUsers.size > 0 && (
        <div className="bg-black/20 backdrop-blur-sm rounded-lg px-3 py-2">
          <div className="flex items-center gap-2 text-white text-sm">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
              <div
                className="w-2 h-2 bg-white rounded-full animate-bounce"
                style={{ animationDelay: "0.1s" }}
              ></div>
              <div
                className="w-2 h-2 bg-white rounded-full animate-bounce"
                style={{ animationDelay: "0.2s" }}
              ></div>
            </div>
            <span>
              {typingUsers.size === 1
                ? "–ö—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç"
                : `${typingUsers.size} —á–µ–ª–æ–≤–µ–∫ –ø–µ—á–∞—Ç–∞—é—Ç`}
              ...
            </span>
          </div>
        </div>
      )}
    </div>
  );
};

export default RealisticMessageGenerator;
