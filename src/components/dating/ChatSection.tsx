import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Message, Profile } from "@/types/dating";
import Icon from "@/components/ui/icon";
import ProfileCard from "./ProfileCard";
import { useState, useEffect } from "react";

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEY = "dating_chat_messages";
const USED_MESSAGES_KEY = "dating_chat_used_messages";

interface ChatSectionProps {
  messages: Message[];
  activeTab: string;
  selectedChat: string | null;
  onTabChange: (tab: string) => void;
  onChatSelect: (userName: string) => void;
  profiles: Profile[];
  onLike: (profileId: string) => void;
  currentUserId?: string;
  onAddMessage: (message: Message) => void;
}

const ChatSection = ({
  messages,
  activeTab,
  selectedChat,
  onTabChange,
  onChatSelect,
  profiles,
  onLike,
  currentUserId,
  onAddMessage,
}: ChatSectionProps) => {
  const [onlineCount, setOnlineCount] = useState(1500000);
  const [usedMessages, setUsedMessages] = useState<Set<string>>(new Set());

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedUsedMessages = localStorage.getItem(USED_MESSAGES_KEY);
    if (savedUsedMessages) {
      try {
        const parsedMessages = JSON.parse(savedUsedMessages);
        setUsedMessages(new Set(parsedMessages));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ localStorage
  const saveUsedMessages = (messages: Set<string>) => {
    try {
      localStorage.setItem(USED_MESSAGES_KEY, JSON.stringify([...messages]));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    }
  };

  const femaleNames = [
    "–ê–Ω–Ω–∞",
    "–ú–∞—Ä–∏—è",
    "–ï–ª–µ–Ω–∞",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
    "–ù–∞—Ç–∞–ª—å—è",
    "–û–ª—å–≥–∞",
    "–¢–∞—Ç—å—è–Ω–∞",
    "–°–≤–µ—Ç–ª–∞–Ω–∞",
    "–ò—Ä–∏–Ω–∞",
    "–Æ–ª–∏—è",
    "–î–∞—Ä—å—è",
    "–ê–ª–∏–Ω–∞",
    "–í–∏–∫—Ç–æ—Ä–∏—è",
    "–ü–æ–ª–∏–Ω–∞",
    "–ö—Ä–∏—Å—Ç–∏–Ω–∞",
    "–í–∞–ª–µ—Ä–∏—è",
    "–°–æ—Ñ–∏—è",
    "–ú–∏–ª–∞–Ω–∞",
    "–ö–∞—Ä–∏–Ω–∞",
    "–î–∏–∞–Ω–∞",
  ];

  const maleNames = [
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
    "–î–º–∏—Ç—Ä–∏–π",
    "–ú–∞–∫—Å–∏–º",
    "–°–µ—Ä–≥–µ–π",
    "–ê–Ω–¥—Ä–µ–π",
    "–ê–ª–µ–∫—Å–µ–π",
    "–ê—Ä—Ç—ë–º",
    "–ò–ª—å—è",
    "–ö–∏—Ä–∏–ª–ª",
    "–ú–∏—Ö–∞–∏–ª",
    "–ù–∏–∫–∏—Ç–∞",
    "–ú–∞—Ç–≤–µ–π",
    "–†–æ–º–∞–Ω",
    "–ï–≥–æ—Ä",
    "–ê—Ä—Å–µ–Ω–∏–π",
    "–ò–≤–∞–Ω",
    "–î–µ–Ω–∏—Å",
    "–¢–∏–º—É—Ä",
    "–í–ª–∞–¥–∏—Å–ª–∞–≤",
    "–ü–∞–≤–µ–ª",
  ];

  const messageTemplates = [
    "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞? üòä",
    "–ö—Ç–æ —Ç—É—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π?",
    "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è!",
    "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è",
    "–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è",
    "–ö—Ç–æ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?",
    "–ú–æ–∂–µ—Ç –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è?",
    "–ò—â—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤",
    "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",
    "–ö–∞–∫ –ø—Ä–æ–≤–µ–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö—Ç–æ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º?",
    "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üí´",
    "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!",
    "–ò—â—É —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "–ö—Ç–æ –ª—é–±–∏—Ç –∫–∏–Ω–æ?",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
    "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç –∏–∑ –ú–æ—Å–∫–≤—ã!",
    "–ö—Ç–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö?",
    "–ò—â—É –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –¥–ª—è –æ–±—â–µ–Ω–∏—è",
    "–ö–∞–∫ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
    "–ö—Ç–æ –ª—é–±–∏—Ç –º—É–∑—ã–∫—É?",
    "–î–∞–≤–∞–π—Ç–µ –¥—Ä—É–∂–∏—Ç—å! ü§ù",
    "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
    "–ö—Ç–æ —Ç—É—Ç –∏–∑ –ü–∏—Ç–µ—Ä–∞?",
    "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é",
    "–í—Å–µ–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!",
    "–ö—Ç–æ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π?",
    "–ú–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è?",
    "–•–æ—Ä–æ—à–µ–≥–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üåü",
    "–ò—â—É –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É",
  ];

  const cities = [
    "–ú–æ—Å–∫–≤–∞",
    "–°–ü–±",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ö–∞–∑–∞–Ω—å",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
  ];

  const generateUniqueMessage = () => {
    let attempts = 0;
    let message = "";
    let fullMessage = "";

    do {
      const names = Math.random() > 0.5 ? femaleNames : maleNames;
      const name = names[Math.floor(Math.random() * names.length)];
      const city = cities[Math.floor(Math.random() * cities.length)];
      const template =
        messageTemplates[Math.floor(Math.random() * messageTemplates.length)];

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      const variations = [
        template,
        `${template} –ö—Ç–æ –∏–∑ ${city}?`,
        `${template} üíï`,
        `${name} –∑–¥–µ—Å—å! ${template}`,
        `${template} –ñ–¥—É –æ—Ç–≤–µ—Ç–∞!`,
      ];

      message = variations[Math.floor(Math.random() * variations.length)];
      fullMessage = `${name}:${message}`;
      attempts++;
    } while (usedMessages.has(fullMessage) && attempts < 50);

    if (attempts >= 50) {
      // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ, —Å–æ–∑–¥–∞–µ–º —Å timestamp
      message = `${messageTemplates[Math.floor(Math.random() * messageTemplates.length)]} (${Date.now()})`;
      fullMessage = `${femaleNames[0]}:${message}`;
    }

    const newUsedMessages = new Set([...usedMessages, fullMessage]);
    setUsedMessages(newUsedMessages);
    saveUsedMessages(newUsedMessages);
    return { name: fullMessage.split(":")[0], text: message };
  };

  // –°—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    const interval = setInterval(
      () => {
        setOnlineCount((prev) => {
          // –ë–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —à–∏—Ä–æ–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
          const changePercent = (Math.random() - 0.5) * 0.02; // –æ—Ç -1% –¥–æ +1%
          const change = Math.floor(prev * changePercent);
          const randomBoost = Math.floor(Math.random() * 2000) - 1000; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥
          const newCount = prev + change + randomBoost;
          return Math.max(1500, Math.min(1800000, newCount)); // –¥–∏–∞–ø–∞–∑–æ–Ω 1500-1800000
        });
      },
      1500 + Math.random() * 3000, // –∫–∞–∂–¥—ã–µ 1.5-4.5 —Å–µ–∫—É–Ω–¥—ã
    );

    return () => clearInterval(interval);
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
  useEffect(() => {
    const interval = setInterval(
      () => {
        if (activeTab === "general") {
          const { name, text } = generateUniqueMessage();
          const newMessage: Message = {
            id: `bot_${Date.now()}_${Math.random()}`,
            text,
            userId: `bot_${name}`,
            userName: name,
            chatType: "general",
            timestamp: new Date(),
          };
          onAddMessage(newMessage);
        }
      },
      5000 + Math.random() * 10000,
    ); // –∫–∞–∂–¥—ã–µ 5-15 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [activeTab, onAddMessage]);

  const generalMessages = messages.filter((msg) => msg.chatType === "general");
  const privateMessages = messages.filter(
    (msg) =>
      msg.chatType === "private" &&
      (msg.chatType === selectedChat || msg.userName === selectedChat),
  );

  const [profilesGender, setProfilesGender] = useState<
    "all" | "male" | "female"
  >("all");

  const filteredProfiles = profiles.filter((profile) => {
    if (profilesGender === "all") return true;
    return profile.gender === profilesGender;
  });

  return (
    <div className="flex-1 flex flex-col">
      <Tabs
        value={activeTab}
        onValueChange={onTabChange}
        className="flex-1 flex flex-col"
      >
        <TabsList className="bg-white/90 p-1 m-2 md:m-4 mb-2 shadow-sm relative flex-wrap md:flex-nowrap">
          <div className="absolute left-2 top-1/2 -translate-y-1/2 hidden md:flex items-center gap-2 text-xs text-green-600 font-medium">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span>{onlineCount.toLocaleString()}</span>
          </div>
          <TabsTrigger value="general" className="flex-1 text-xs md:text-sm">
            –û–±—â–∏–π —á–∞—Ç
          </TabsTrigger>
          <TabsTrigger value="profiles" className="flex-1 text-xs md:text-sm">
            –ê–Ω–∫–µ—Ç—ã
          </TabsTrigger>
          {selectedChat && (
            <TabsTrigger value="private" className="flex-1 text-xs md:text-sm">
              –õ–∏—á–Ω—ã–µ
            </TabsTrigger>
          )}
        </TabsList>

        {/* –ú–æ–±–∏–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω */}
        <div className="md:hidden flex items-center justify-center gap-2 text-xs text-green-600 font-medium pb-2">
          <div className="w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
          <span>{onlineCount.toLocaleString()} –æ–Ω–ª–∞–π–Ω</span>
        </div>

        <TabsContent
          value="general"
          className="flex-1 overflow-y-auto px-2 md:px-6 pb-4"
        >
          <div className="space-y-3 md:space-y-4">
            {generalMessages.map((msg) => (
              <div
                key={msg.id}
                className="bg-white/80 p-3 md:p-4 rounded-lg shadow-sm"
              >
                <div className="flex items-center gap-2 md:gap-3 mb-2">
                  <div className="w-6 h-6 md:w-8 md:h-8 bg-pink-500 rounded-full flex items-center justify-center">
                    <Icon
                      name="User"
                      size={12}
                      className="md:w-3.5 md:h-3.5 text-white"
                    />
                  </div>
                  <button
                    onClick={() => onChatSelect(msg.userName)}
                    className="font-semibold text-pink-600 hover:underline text-sm md:text-base"
                  >
                    {msg.userName}
                  </button>
                  <span className="text-xs text-gray-500">
                    {msg.timestamp.toLocaleTimeString()}
                  </span>
                </div>
                <p className="text-gray-800 text-sm md:text-base">{msg.text}</p>
              </div>
            ))}
          </div>
        </TabsContent>

        <TabsContent
          value="profiles"
          className="flex-1 overflow-y-auto p-2 md:p-6"
        >
          {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É */}
          <div className="flex gap-2 mb-4 bg-white/90 p-2 rounded-lg shadow-sm">
            <button
              onClick={() => setProfilesGender("all")}
              className={`flex-1 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                profilesGender === "all"
                  ? "bg-pink-500 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              –í—Å–µ
            </button>
            <button
              onClick={() => setProfilesGender("male")}
              className={`flex-1 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                profilesGender === "male"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              –ú—É–∂—á–∏–Ω—ã
            </button>
            <button
              onClick={() => setProfilesGender("female")}
              className={`flex-1 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                profilesGender === "female"
                  ? "bg-pink-500 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              –ñ–µ–Ω—â–∏–Ω—ã
            </button>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 md:gap-6">
            {filteredProfiles.map((profile) => (
              <ProfileCard
                key={profile.id}
                profile={profile}
                onLike={onLike}
                currentUserId={currentUserId}
              />
            ))}
          </div>
        </TabsContent>

        {selectedChat && (
          <TabsContent
            value="private"
            className="flex-1 overflow-y-auto px-2 md:px-6 pb-4"
          >
            <div className="space-y-3 md:space-y-4">
              {privateMessages.map((msg) => (
                <div
                  key={msg.id}
                  className="bg-blue-50 p-3 md:p-4 rounded-lg shadow-sm"
                >
                  <div className="flex items-center gap-2 md:gap-3 mb-2">
                    <div className="w-6 h-6 md:w-8 md:h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <Icon
                        name="User"
                        size={12}
                        className="md:w-3.5 md:h-3.5 text-white"
                      />
                    </div>
                    <span className="font-semibold text-blue-700 text-sm md:text-base">
                      {msg.userName}
                    </span>
                    <span className="text-xs text-gray-500">
                      {msg.timestamp.toLocaleTimeString()}
                    </span>
                  </div>
                  <p className="text-gray-800 text-sm md:text-base">
                    {msg.text}
                  </p>
                </div>
              ))}
            </div>
          </TabsContent>
        )}
      </Tabs>
    </div>
  );
};

export default ChatSection;
