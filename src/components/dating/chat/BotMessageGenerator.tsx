import { useEffect, useState } from "react";
import { Message } from "@/types/dating";

const USED_MESSAGES_KEY = "dating_chat_used_messages";

interface BotMessageGeneratorProps {
  isActive: boolean;
  onMessageGenerated: (message: Message) => void;
}

const BotMessageGenerator = ({
  isActive,
  onMessageGenerated,
}: BotMessageGeneratorProps) => {
  const [usedMessages, setUsedMessages] = useState<Set<string>>(new Set());

  const femaleNames = [
    "–ê–Ω–Ω–∞",
    "–ú–∞—Ä–∏—è",
    "–ï–ª–µ–Ω–∞",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
    "–ù–∞—Ç–∞–ª—å—è",
    "–û–ª—å–≥–∞",
    "–¢–∞—Ç—å—è–Ω–∞",
    "–°–≤–µ—Ç–ª–∞–Ω–∞",
    "–ò—Ä–∏–Ω–∞",
    "–Æ–ª–∏—è",
    "–î–∞—Ä—å—è",
    "–ê–ª–∏–Ω–∞",
    "–í–∏–∫—Ç–æ—Ä–∏—è",
    "–ü–æ–ª–∏–Ω–∞",
    "–ö—Ä–∏—Å—Ç–∏–Ω–∞",
    "–í–∞–ª–µ—Ä–∏—è",
    "–°–æ—Ñ–∏—è",
    "–ú–∏–ª–∞–Ω–∞",
    "–ö–∞—Ä–∏–Ω–∞",
    "–î–∏–∞–Ω–∞",
  ];

  const maleNames = [
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
    "–î–º–∏—Ç—Ä–∏–π",
    "–ú–∞–∫—Å–∏–º",
    "–°–µ—Ä–≥–µ–π",
    "–ê–Ω–¥—Ä–µ–π",
    "–ê–ª–µ–∫—Å–µ–π",
    "–ê—Ä—Ç—ë–º",
    "–ò–ª—å—è",
    "–ö–∏—Ä–∏–ª–ª",
    "–ú–∏—Ö–∞–∏–ª",
    "–ù–∏–∫–∏—Ç–∞",
    "–ú–∞—Ç–≤–µ–π",
    "–†–æ–º–∞–Ω",
    "–ï–≥–æ—Ä",
    "–ê—Ä—Å–µ–Ω–∏–π",
    "–ò–≤–∞–Ω",
    "–î–µ–Ω–∏—Å",
    "–¢–∏–º—É—Ä",
    "–í–ª–∞–¥–∏—Å–ª–∞–≤",
    "–ü–∞–≤–µ–ª",
  ];

  const messageTemplates = [
    "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞? üòä",
    "–ö—Ç–æ —Ç—É—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π?",
    "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è!",
    "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è",
    "–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è",
    "–ö—Ç–æ –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?",
    "–ú–æ–∂–µ—Ç –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è?",
    "–ò—â—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤",
    "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",
    "–ö–∞–∫ –ø—Ä–æ–≤–µ–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö—Ç–æ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º?",
    "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üí´",
    "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!",
    "–ò—â—É —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "–ö—Ç–æ –ª—é–±–∏—Ç –∫–∏–Ω–æ?",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
    "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç –∏–∑ –ú–æ—Å–∫–≤—ã!",
    "–ö—Ç–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö?",
    "–ò—â—É –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –¥–ª—è –æ–±—â–µ–Ω–∏—è",
    "–ö–∞–∫ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
    "–ö—Ç–æ –ª—é–±–∏—Ç –º—É–∑—ã–∫—É?",
    "–î–∞–≤–∞–π—Ç–µ –¥—Ä—É–∂–∏—Ç—å! ü§ù",
    "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
    "–ö—Ç–æ —Ç—É—Ç –∏–∑ –ü–∏—Ç–µ—Ä–∞?",
    "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é",
    "–í—Å–µ–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!",
    "–ö—Ç–æ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π?",
    "–ú–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è?",
    "–•–æ—Ä–æ—à–µ–≥–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üåü",
    "–ò—â—É –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É",
  ];

  const cities = [
    "–ú–æ—Å–∫–≤–∞",
    "–°–ü–±",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ö–∞–∑–∞–Ω—å",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
  ];

  useEffect(() => {
    const savedUsedMessages = localStorage.getItem(USED_MESSAGES_KEY);
    if (savedUsedMessages) {
      try {
        const parsedMessages = JSON.parse(savedUsedMessages);
        setUsedMessages(new Set(parsedMessages));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      }
    }
  }, []);

  const saveUsedMessages = (messages: Set<string>) => {
    try {
      localStorage.setItem(USED_MESSAGES_KEY, JSON.stringify([...messages]));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    }
  };

  const generateUniqueMessage = () => {
    let attempts = 0;
    let message = "";
    let fullMessage = "";

    do {
      const names = Math.random() > 0.5 ? femaleNames : maleNames;
      const name = names[Math.floor(Math.random() * names.length)];
      const city = cities[Math.floor(Math.random() * cities.length)];
      const template =
        messageTemplates[Math.floor(Math.random() * messageTemplates.length)];

      const variations = [
        template,
        `${template} –ö—Ç–æ –∏–∑ ${city}?`,
        `${template} üíï`,
        `${name} –∑–¥–µ—Å—å! ${template}`,
        `${template} –ñ–¥—É –æ—Ç–≤–µ—Ç–∞!`,
      ];

      message = variations[Math.floor(Math.random() * variations.length)];
      fullMessage = `${name}:${message}`;
      attempts++;
    } while (usedMessages.has(fullMessage) && attempts < 50);

    if (attempts >= 50) {
      message = `${messageTemplates[Math.floor(Math.random() * messageTemplates.length)]} (${Date.now()})`;
      fullMessage = `${femaleNames[0]}:${message}`;
    }

    const newUsedMessages = new Set([...usedMessages, fullMessage]);
    setUsedMessages(newUsedMessages);
    saveUsedMessages(newUsedMessages);
    return { name: fullMessage.split(":")[0], text: message };
  };

  useEffect(() => {
    if (!isActive) return;

    const interval = setInterval(
      () => {
        const { name, text } = generateUniqueMessage();
        const newMessage: Message = {
          id: `bot_${Date.now()}_${Math.random()}`,
          text,
          userId: `bot_${name}`,
          userName: name,
          chatType: "general",
          timestamp: new Date(),
        };
        onMessageGenerated(newMessage);
      },
      5000 + Math.random() * 10000,
    );

    return () => clearInterval(interval);
  }, [isActive, onMessageGenerated]);

  return null;
};

export default BotMessageGenerator;
